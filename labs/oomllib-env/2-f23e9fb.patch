From f23e9fbff1b7c635c09b2f2d24bd8ca3bafae078 Mon Sep 17 00:00:00 2001
From: Wilson Lin <contact@wilsonl.in>
Date: Mon, 23 Apr 2018 15:42:12 +1200
Subject: [PATCH] Improve syntax support in parser; remove unsupported TS
 declarations

---
 dec/dom.generated.d.ts                        |  14 +--
 dec/es2015.core.d.ts                          |  29 +----
 dec/es2015.symbol.d.ts                        |   2 +-
 dec/es5.d.ts                                  |  73 +-----------
 .../Exception/InternalStateError.java         |   2 +-
 .../Exception/MalformedSyntaxException.java   |   4 +-
 .../RequiredSyntaxNotFoundException.java      |   4 +-
 .../Exception/SyntaxException.java            |   4 +-
 .../UnexpectedEndOfCodeException.java         |   2 +-
 .../{Parse => }/Lexing/AcceptableChars.java   |   4 +-
 .../core/env/gen/{Parse => }/Lexing/Code.java |  69 +++++++-----
 .../env/gen/{Parse => }/Lexing/Lexer.java     |  12 +-
 .../{Parse => }/Lexing/OperatorTreeNode.java  |   6 +-
 .../org/ooml/oomlc/core/env/gen/Main.java     |  63 ++---------
 .../core/env/gen/Parse/Syntax/Callable.java   |  36 ------
 .../Syntax/Statement/DeclarableStatement.java |  19 ----
 .../Syntax/Statement/InterfaceStatement.java  |  21 ----
 .../gen/Parse/Syntax/Statement/Statement.java |  15 ---
 .../Parse/Syntax/Type/CallableSubtype.java    |  28 -----
 .../Parse/Syntax/Type/ReferenceSubtype.java   |  28 -----
 .../Syntax/Type/StringLiteralSubtype.java     |  16 ---
 .../env/gen/Parse/Syntax/Type/Subtype.java    |  47 --------
 .../core/env/gen/Parse/Syntax/Type/Type.java  |  30 -----
 .../Parsing/AcceptableTokenTypes.java         |   4 +-
 .../env/gen/{Parse => }/Parsing/Token.java    |   4 +-
 .../gen/{Parse => }/Parsing/TokenType.java    |   5 +-
 .../env/gen/{Parse => }/Parsing/Tokens.java   |  25 +++--
 .../gen/Serialising/IdentifierSerialiser.java |  16 +++
 .../core/env/gen/Serialising/JSONExc.java     |  11 ++
 .../Serialising/JSONExclusionStrategy.java    |  16 +++
 .../env/gen/Serialising/JSONSerialiser.java   |  17 +++
 .../oomlc/core/env/gen/Syntax/Callable.java   |  44 ++++++++
 .../core/env/gen/Syntax/GenericParameter.java |  53 +++++++++
 .../gen/{Parse => }/Syntax/Identifier.java    |  13 ++-
 .../Syntax/Interface/Interface.java           |  51 ++++-----
 .../Interface/InterfaceCallSignature.java     |  10 +-
 .../Interface/InterfaceConstructor.java       |  10 +-
 .../Interface/InterfaceIndexSignature.java    |  18 +--
 .../Syntax/Interface/InterfaceMethod.java     |  10 +-
 .../Syntax/Interface/InterfaceProperty.java   |  12 +-
 .../env/gen/{Parse => }/Syntax/Parameter.java |   8 +-
 .../Syntax/Statement/DeclarableStatement.java |  15 +++
 .../Statement/DeclarationStatement.java       |   8 +-
 .../Syntax/Statement/FunctionStatement.java   |  12 +-
 .../Syntax/Statement/InterfaceStatement.java  |  54 +++++++++
 .../Syntax/Statement/NamespaceStatement.java  |  35 ++++++
 .../env/gen/Syntax/Statement/Statement.java   |  76 +++++++++++++
 .../Syntax/Statement/TypeAliasStatement.java  |  30 +++++
 .../Syntax/Statement/VariableStatement.java   |  16 +--
 .../core/env/gen/Syntax/Type/ArrayType.java   |  12 ++
 .../env/gen/Syntax/Type/CallableType.java     |  22 ++++
 .../env/gen/Syntax/Type/IndexQueryType.java   |  12 ++
 .../gen/Syntax/Type/InlineInterfaceType.java  |  17 +++
 .../core/env/gen/Syntax/Type/KeyofType.java   |  20 ++++
 .../env/gen/Syntax/Type/PredicateType.java    |  28 +++++
 .../Type/PrimitiveType.java}                  |  23 ++--
 .../env/gen/Syntax/Type/ReferenceType.java    |  46 ++++++++
 .../gen/Syntax/Type/StringLiteralType.java    |  20 ++++
 .../oomlc/core/env/gen/Syntax/Type/Type.java  | 104 ++++++++++++++++++
 .../core/env/gen/Syntax/Type/UnionType.java   |  14 +++
 .../env/gen/{Parse => }/Utils/Acceptable.java |   2 +-
 .../env/gen/{Parse => }/Utils/Matchable.java  |   2 +-
 .../{Parse => }/Utils/MatcherTreeNode.java    |  12 +-
 .../env/gen/{Parse => }/Utils/Position.java   |   2 +-
 pom.xml                                       |   2 +
 65 files changed, 873 insertions(+), 566 deletions(-)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Exception/InternalStateError.java (86%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Exception/MalformedSyntaxException.java (61%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Exception/RequiredSyntaxNotFoundException.java (64%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Exception/SyntaxException.java (82%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Exception/UnexpectedEndOfCodeException.java (74%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Lexing/AcceptableChars.java (82%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Lexing/Code.java (80%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Lexing/Lexer.java (93%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Lexing/OperatorTreeNode.java (67%)
 delete mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Callable.java
 delete mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/DeclarableStatement.java
 delete mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/InterfaceStatement.java
 delete mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/Statement.java
 delete mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/CallableSubtype.java
 delete mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/ReferenceSubtype.java
 delete mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/StringLiteralSubtype.java
 delete mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/Subtype.java
 delete mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/Type.java
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Parsing/AcceptableTokenTypes.java (66%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Parsing/Token.java (85%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Parsing/TokenType.java (86%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Parsing/Tokens.java (84%)
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/IdentifierSerialiser.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONExc.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONExclusionStrategy.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONSerialiser.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Callable.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/GenericParameter.java
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Identifier.java (74%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Interface/Interface.java (60%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Interface/InterfaceCallSignature.java (52%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Interface/InterfaceConstructor.java (54%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Interface/InterfaceIndexSignature.java (52%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Interface/InterfaceMethod.java (60%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Interface/InterfaceProperty.java (77%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Parameter.java (86%)
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/DeclarableStatement.java
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Statement/DeclarationStatement.java (71%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Statement/FunctionStatement.java (66%)
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/InterfaceStatement.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/NamespaceStatement.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/Statement.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/TypeAliasStatement.java
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Syntax/Statement/VariableStatement.java (71%)
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/ArrayType.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/CallableType.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/IndexQueryType.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/InlineInterfaceType.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/KeyofType.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/PredicateType.java
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse/Syntax/Type/PrimitiveSubtype.java => Syntax/Type/PrimitiveType.java} (55%)
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/ReferenceType.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/StringLiteralType.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/Type.java
 create mode 100644 gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/UnionType.java
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Utils/Acceptable.java (85%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Utils/Matchable.java (63%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Utils/MatcherTreeNode.java (76%)
 rename gen/main/java/org/ooml/oomlc/core/env/gen/{Parse => }/Utils/Position.java (84%)

diff --git a/dec/dom.generated.d.ts b/dec/dom.generated.d.ts
index 1c75c73804..ea0a2a3509 100644
--- a/dec/dom.generated.d.ts
+++ b/dec/dom.generated.d.ts
@@ -2872,7 +2872,7 @@ declare var ChannelSplitterNode: {
     new(): ChannelSplitterNode;
 };
 
-interface CharacterData extends Node, ChildNode {
+interface CharacterData extends Node {
     data: string;
     readonly length: number;
     appendData(arg: string): void;
@@ -2887,10 +2887,6 @@ declare var CharacterData: {
     new(): CharacterData;
 };
 
-interface ChildNode {
-    remove(): void;
-}
-
 interface ClientRect {
     bottom: number;
     readonly height: number;
@@ -4344,7 +4340,7 @@ interface DocumentOrShadowRoot {
     getSelection(): Selection | null;
 }
 
-interface DocumentType extends Node, ChildNode {
+interface DocumentType extends Node {
     readonly entities: NamedNodeMap;
     readonly internalSubset: string | null;
     readonly name: string;
@@ -4443,7 +4439,7 @@ interface ElementEventMap extends GlobalEventHandlersEventMap {
     "webkitfullscreenerror": Event;
 }
 
-interface Element extends Node, GlobalEventHandlers, ElementTraversal, ParentNode, ChildNode {
+interface Element extends Node, GlobalEventHandlers, ElementTraversal, ParentNode {
     readonly assignedSlot: HTMLSlotElement | null;
     readonly attributes: NamedNodeMap;
     readonly classList: DOMTokenList;
@@ -9358,7 +9354,7 @@ interface NavigatorUserMedia {
 
 interface Node extends EventTarget {
     readonly baseURI: string | null;
-    readonly childNodes: NodeListOf<Node & ChildNode>;
+    readonly childNodes: NodeListOf<Node>;
     readonly firstChild: Node | null;
     readonly isConnected: boolean;
     readonly lastChild: Node | null;
@@ -16066,4 +16062,4 @@ type VRDisplayEventReason = "mounted" | "navigation" | "requested" | "unmounted"
 type VREye = "left" | "right";
 type VideoFacingModeEnum = "user" | "environment" | "left" | "right";
 type VisibilityState = "hidden" | "visible" | "prerender" | "unloaded";
-type XMLHttpRequestResponseType = "" | "arraybuffer" | "blob" | "document" | "json" | "text";
\ No newline at end of file
+type XMLHttpRequestResponseType = "" | "arraybuffer" | "blob" | "document" | "json" | "text";
diff --git a/dec/es2015.core.d.ts b/dec/es2015.core.d.ts
index c1303de8ae..554f13c8e6 100644
--- a/dec/es2015.core.d.ts
+++ b/dec/es2015.core.d.ts
@@ -273,40 +273,13 @@ interface Object {
 }
 
 interface ObjectConstructor {
-    /**
-     * Copy the values of all of the enumerable own properties from one or more source objects to a
-     * target object. Returns the target object.
-     * @param target The target object to copy to.
-     * @param source The source object from which to copy properties.
-     */
-    assign<T, U>(target: T, source: U): T & U;
-
-    /**
-     * Copy the values of all of the enumerable own properties from one or more source objects to a
-     * target object. Returns the target object.
-     * @param target The target object to copy to.
-     * @param source1 The first source object from which to copy properties.
-     * @param source2 The second source object from which to copy properties.
-     */
-    assign<T, U, V>(target: T, source1: U, source2: V): T & U & V;
-
-    /**
-     * Copy the values of all of the enumerable own properties from one or more source objects to a
-     * target object. Returns the target object.
-     * @param target The target object to copy to.
-     * @param source1 The first source object from which to copy properties.
-     * @param source2 The second source object from which to copy properties.
-     * @param source3 The third source object from which to copy properties.
-     */
-    assign<T, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;
-
     /**
      * Copy the values of all of the enumerable own properties from one or more source objects to a
      * target object. Returns the target object.
      * @param target The target object to copy to.
      * @param sources One or more source objects from which to copy properties
      */
-    assign(target: object, ...sources: any[]): any;
+    assign<T>(target: T, ...sources: any[]): T;
 
     /**
      * Returns an array of all symbol properties found directly on object o.
diff --git a/dec/es2015.symbol.d.ts b/dec/es2015.symbol.d.ts
index 9224dde93d..4851e7418e 100644
--- a/dec/es2015.symbol.d.ts
+++ b/dec/es2015.symbol.d.ts
@@ -33,4 +33,4 @@ interface SymbolConstructor {
     keyFor(sym: symbol): string | undefined;
 }
 
-declare var Symbol: SymbolConstructor;
\ No newline at end of file
+declare var Symbol: SymbolConstructor;
diff --git a/dec/es5.d.ts b/dec/es5.d.ts
index 4b15e0f6e6..17fa9c075e 100644
--- a/dec/es5.d.ts
+++ b/dec/es5.d.ts
@@ -159,7 +159,7 @@ interface ObjectConstructor {
       * @param o Object to use as a prototype. May be null
       * @param properties JavaScript object that contains one or more property descriptors.
       */
-    create(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;
+    create(o: object | null, properties: PropertyDescriptorMap): any;
 
     /**
       * Adds a property to an object, or modifies attributes of an existing property.
@@ -167,14 +167,14 @@ interface ObjectConstructor {
       * @param p The property name.
       * @param attributes Descriptor for the property. It can be for a data property or an accessor property.
       */
-    defineProperty(o: any, p: string, attributes: PropertyDescriptor & ThisType<any>): any;
+    defineProperty(o: any, p: string, attributes: PropertyDescriptor): any;
 
     /**
       * Adds one or more properties to an object, and/or modifies attributes of existing properties.
       * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.
       * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.
       */
-    defineProperties(o: any, properties: PropertyDescriptorMap & ThisType<any>): any;
+    defineProperties(o: any, properties: PropertyDescriptorMap): any;
 
     /**
       * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.
@@ -1272,8 +1272,6 @@ declare type PropertyDecorator = (target: Object, propertyKey: string | symbol)
 declare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;
 declare type ParameterDecorator = (target: Object, propertyKey: string | symbol, parameterIndex: number) => void;
 
-declare type PromiseConstructorLike = new <T>(executor: (resolve: (value?: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;
-
 interface PromiseLike<T> {
     /**
      * Attaches callbacks for the resolution and/or rejection of the Promise.
@@ -1309,71 +1307,6 @@ interface ArrayLike<T> {
     readonly [n: number]: T;
 }
 
-/**
- * Make all properties in T optional
- */
-type Partial<T> = {
-    [P in keyof T]?: T[P];
-};
-
-/**
- * Make all properties in T required
- */
-type Required<T> = {
-    [P in keyof T]-?: T[P];
-};
-
-/**
- * Make all properties in T readonly
- */
-type Readonly<T> = {
-    readonly [P in keyof T]: T[P];
-};
-
-/**
- * From T pick a set of properties K
- */
-type Pick<T, K extends keyof T> = {
-    [P in K]: T[P];
-};
-
-/**
- * Construct a type with a set of properties K of type T
- */
-type Record<K extends string, T> = {
-    [P in K]: T;
-};
-
-/**
- * Exclude from T those types that are assignable to U
- */
-type Exclude<T, U> = T extends U ? never : T;
-
-/**
- * Extract from T those types that are assignable to U
- */
-type Extract<T, U> = T extends U ? T : never;
-
-/**
- * Exclude null and undefined from T
- */
-type NonNullable<T> = T extends null | undefined ? never : T;
-
-/**
- * Obtain the return type of a function type
- */
-type ReturnType<T extends (...args: any[]) => any> = T extends (...args: any[]) => infer R ? R : any;
-
-/**
- * Obtain the return type of a constructor function type
- */
-type InstanceType<T extends new (...args: any[]) => any> = T extends new (...args: any[]) => infer R ? R : any;
-
-/**
- * Marker for contextual 'this' type
- */
-interface ThisType<T> { }
-
 /**
   * Represents a raw buffer of binary data, which is used to store data for the
   * different typed arrays. ArrayBuffers cannot be read from or written to directly,
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/InternalStateError.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Exception/InternalStateError.java
similarity index 86%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/InternalStateError.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Exception/InternalStateError.java
index 215e27c87a..ab8944761b 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/InternalStateError.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Exception/InternalStateError.java
@@ -1,4 +1,4 @@
-package org.ooml.oomlc.core.env.gen.Parse.Exception;
+package org.ooml.oomlc.core.env.gen.Exception;
 
 public class InternalStateError extends Error {
   public InternalStateError (String message) {
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/MalformedSyntaxException.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Exception/MalformedSyntaxException.java
similarity index 61%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/MalformedSyntaxException.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Exception/MalformedSyntaxException.java
index 8ade1f302e..83606b1578 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/MalformedSyntaxException.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Exception/MalformedSyntaxException.java
@@ -1,6 +1,6 @@
-package org.ooml.oomlc.core.env.gen.Parse.Exception;
+package org.ooml.oomlc.core.env.gen.Exception;
 
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 public class MalformedSyntaxException extends SyntaxException {
   public MalformedSyntaxException (String message, Position position) {
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/RequiredSyntaxNotFoundException.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Exception/RequiredSyntaxNotFoundException.java
similarity index 64%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/RequiredSyntaxNotFoundException.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Exception/RequiredSyntaxNotFoundException.java
index 1826d86662..ac35f576da 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/RequiredSyntaxNotFoundException.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Exception/RequiredSyntaxNotFoundException.java
@@ -1,6 +1,6 @@
-package org.ooml.oomlc.core.env.gen.Parse.Exception;
+package org.ooml.oomlc.core.env.gen.Exception;
 
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 public class RequiredSyntaxNotFoundException extends MalformedSyntaxException {
   public RequiredSyntaxNotFoundException (String message, Position position) {
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/SyntaxException.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Exception/SyntaxException.java
similarity index 82%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/SyntaxException.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Exception/SyntaxException.java
index 58440a0c3c..c62e5973b8 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/SyntaxException.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Exception/SyntaxException.java
@@ -1,6 +1,6 @@
-package org.ooml.oomlc.core.env.gen.Parse.Exception;
+package org.ooml.oomlc.core.env.gen.Exception;
 
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 public abstract class SyntaxException extends RuntimeException {
   private final Position position;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/UnexpectedEndOfCodeException.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Exception/UnexpectedEndOfCodeException.java
similarity index 74%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/UnexpectedEndOfCodeException.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Exception/UnexpectedEndOfCodeException.java
index 12112aa26c..e7bcb1ad7a 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Exception/UnexpectedEndOfCodeException.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Exception/UnexpectedEndOfCodeException.java
@@ -1,4 +1,4 @@
-package org.ooml.oomlc.core.env.gen.Parse.Exception;
+package org.ooml.oomlc.core.env.gen.Exception;
 
 public class UnexpectedEndOfCodeException extends SyntaxException {
   public UnexpectedEndOfCodeException () {
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/AcceptableChars.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/AcceptableChars.java
similarity index 82%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/AcceptableChars.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/AcceptableChars.java
index 1ab51e7562..e40f03cfcc 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/AcceptableChars.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/AcceptableChars.java
@@ -1,6 +1,6 @@
-package org.ooml.oomlc.core.env.gen.Parse.Lexing;
+package org.ooml.oomlc.core.env.gen.Lexing;
 
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Acceptable;
+import org.ooml.oomlc.core.env.gen.Utils.Acceptable;
 
 public class AcceptableChars extends Acceptable<Character> {
   public AcceptableChars (String chars) {
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/Code.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/Code.java
similarity index 80%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/Code.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/Code.java
index a7d00b8dd5..ec1afcdaa5 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/Code.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/Code.java
@@ -1,9 +1,9 @@
-package org.ooml.oomlc.core.env.gen.Parse.Lexing;
+package org.ooml.oomlc.core.env.gen.Lexing;
 
-import org.ooml.oomlc.core.env.gen.Parse.Exception.MalformedSyntaxException;
-import org.ooml.oomlc.core.env.gen.Parse.Exception.UnexpectedEndOfCodeException;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Matchable;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+import org.ooml.oomlc.core.env.gen.Exception.MalformedSyntaxException;
+import org.ooml.oomlc.core.env.gen.Exception.UnexpectedEndOfCodeException;
+import org.ooml.oomlc.core.env.gen.Utils.Matchable;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -35,39 +35,60 @@ public class Code implements Matchable<Character> {
     this.inputStream = new BufferedReader(new InputStreamReader(inputStream));
   }
 
+  private Character _readCharFromStream () {
+    int nextCharAsInt;
+
+    try {
+      nextCharAsInt = inputStream.read();
+    } catch (IOException e) {
+      return null;
+    }
+
+    if (nextCharAsInt == -1) {
+      return null;
+    }
+
+    return (char) nextCharAsInt;
+  }
+
   private char readChar () {
     while (lastReadChars.size() > MAX_HISTORICAL_BUFFER_SIZE) {
       lastReadChars.removeFirst();
     }
+
     char nextChar;
+
     try {
       nextChar = returnBuffer.removeFirst();
     } catch (NoSuchElementException nsee) {
-      int nextCharAsInt;
-      try {
-        nextCharAsInt = inputStream.read();
-      } catch (IOException e) {
+      Character nextCharFromStream = _readCharFromStream();
+      if (nextCharFromStream == null) {
         throw new UnexpectedEndOfCodeException();
       }
-      if (nextCharAsInt == -1) {
-        throw new UnexpectedEndOfCodeException();
+
+      if (nextCharFromStream == '\r') {
+        Character nextNextCharFromStream = _readCharFromStream();
+        if (nextNextCharFromStream != null) {
+          if (nextNextCharFromStream == '\n') {
+            nextCharFromStream = '\n';
+          } else {
+            returnBuffer.addFirst(nextNextCharFromStream);
+          }
+        }
       }
-      nextChar = (char) nextCharAsInt;
+
+      nextChar = nextCharFromStream;
     }
-    lastReadChars.addLast(nextChar);
-    switch (nextChar) {
-    case '\n':
-      if (lastReadChars.peekLast() == '\r') {
-        break;
-      }
-    case '\r':
+
+    if (nextChar == '\n') {
       currentLineNo++;
       currentColNo = 0;
-      break;
-
-    default:
+    } else {
       currentColNo++;
     }
+
+    lastReadChars.addLast(nextChar);
+
     return nextChar;
   }
 
@@ -78,10 +99,6 @@ public class Code implements Matchable<Character> {
   public void backUp () {
     char ret = lastReadChars.removeLast();
     switch (ret) {
-    case '\r':
-      if (returnBuffer.peekFirst() == '\n') {
-        break;
-      }
     case '\n':
       currentLineNo--;
       currentColNo = -1;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/Lexer.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/Lexer.java
similarity index 93%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/Lexer.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/Lexer.java
index 6b0fb08399..8edff09214 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/Lexer.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/Lexer.java
@@ -1,13 +1,12 @@
-package org.ooml.oomlc.core.env.gen.Parse.Lexing;
+package org.ooml.oomlc.core.env.gen.Lexing;
 
-import org.ooml.oomlc.core.env.gen.Parse.Exception.InternalStateError;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Token;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Token;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType.*;
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.*;
 
 public class Lexer {
   private static final AcceptableChars LINE_TERMINATOR = new AcceptableChars('\r', '\n');
@@ -46,6 +45,7 @@ public class Lexer {
     sequences.put("=>", T_EQUALS_AND_RIGHT_CHEVRON);
     sequences.put("=", T_EQUALS);
 
+    sequences.put("&", T_AMPERSAND);
     sequences.put("|", T_PIPE);
 
     sequences.put(",", T_COMMA);
@@ -70,7 +70,9 @@ public class Lexer {
     map.put("extends", T_KEYWORD_EXTENDS);
     map.put("function", T_KEYWORD_FUNCTION);
     map.put("interface", T_KEYWORD_INTERFACE);
+    map.put("is", T_KEYWORD_IS);
     map.put("keyof", T_KEYWORD_KEYOF);
+    map.put("namespace", T_KEYWORD_NAMESPACE);
     map.put("new", T_KEYWORD_NEW);
     map.put("readonly", T_KEYWORD_READONLY);
     map.put("type", T_KEYWORD_TYPE);
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/OperatorTreeNode.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/OperatorTreeNode.java
similarity index 67%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/OperatorTreeNode.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/OperatorTreeNode.java
index 5e051ec5fa..94dab76b51 100755
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Lexing/OperatorTreeNode.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Lexing/OperatorTreeNode.java
@@ -1,8 +1,8 @@
-package org.ooml.oomlc.core.env.gen.Parse.Lexing;
+package org.ooml.oomlc.core.env.gen.Lexing;
 
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.MatcherTreeNode;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Utils.MatcherTreeNode;
 
 public class OperatorTreeNode extends MatcherTreeNode<Character, TokenType> {
   public void addSequence (char[] raw_sequence, int start, TokenType result) {
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Main.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Main.java
index a9a638f5fc..527c5c0437 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Main.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Main.java
@@ -1,41 +1,17 @@
 package org.ooml.oomlc.core.env.gen;
 
-import com.google.gson.Gson;
-import org.ooml.oomlc.core.env.gen.Parse.Exception.UnexpectedEndOfCodeException;
-import org.ooml.oomlc.core.env.gen.Parse.Lexing.Code;
-import org.ooml.oomlc.core.env.gen.Parse.Lexing.Lexer;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement.DeclarationStatement;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement.FunctionStatement;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement.InterfaceStatement;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement.Statement;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement.VariableStatement;
+import org.ooml.oomlc.core.env.gen.Lexing.Code;
+import org.ooml.oomlc.core.env.gen.Lexing.Lexer;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Serialising.JSONSerialiser;
+import org.ooml.oomlc.core.env.gen.Syntax.Statement.Statement;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
-import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
-import java.util.function.Function;
 
 public class Main {
-  private static final Map<TokenType, Function<Tokens, Statement>> PARSERS = _createParsersMap();
-
-  private static Map<TokenType, Function<Tokens, Statement>> _createParsersMap () {
-    Map<TokenType, Function<Tokens, Statement>> map = new HashMap<>();
-
-    map.put(TokenType.T_KEYWORD_CONST, VariableStatement::parseVariableStatement);
-    map.put(TokenType.T_KEYWORD_VAR, VariableStatement::parseVariableStatement);
-    map.put(TokenType.T_KEYWORD_FUNCTION, FunctionStatement::parseFunctionStatement);
-    map.put(TokenType.T_KEYWORD_DECLARE, DeclarationStatement::parseDeclarationStatement);
-    map.put(TokenType.T_KEYWORD_INTERFACE, InterfaceStatement::parseInterfaceStatement);
-
-    return map;
-  }
-
   private static List<Statement> parseFile (String filePath) throws FileNotFoundException {
     File file = new File(filePath);
 
@@ -45,30 +21,7 @@ public class Main {
     Lexer lexer = new Lexer(code);
     Tokens tokens = new Tokens(lexer);
 
-    List<Statement> statements = new ArrayList<>();
-
-    while (true) {
-      TokenType nextTokenType;
-      try {
-        nextTokenType = tokens.peekType();
-      } catch (UnexpectedEndOfCodeException ueoce) {
-        break;
-      }
-
-      Statement statement;
-
-      if (!PARSERS.containsKey(nextTokenType)) {
-        throw tokens.constructMalformedSyntaxException("Unknown statement");
-      }
-
-      statement = PARSERS.get(nextTokenType).apply(tokens);
-
-      tokens.skipIfNext(TokenType.T_SEMICOLON);
-
-      statements.add(statement);
-    }
-
-    return statements;
+    return Statement.parseStatements(tokens, null);
   }
 
   public static void main (String[] args) throws FileNotFoundException {
@@ -78,7 +31,7 @@ public class Main {
 
     List<Statement> statements = parseFile(args[0]);
 
-    Gson gson = new Gson();
-    System.out.println(gson.toJson(statements));
+    String serialised = JSONSerialiser.serialise(statements);
+    System.out.println(serialised);
   }
 }
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Callable.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Callable.java
deleted file mode 100644
index 188075cd7f..0000000000
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Callable.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax;
-
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Type.Type;
-
-import java.util.List;
-
-public class Callable {
-  private final boolean optional;
-  private final List<Parameter> parameters;
-  private final Type returnType;
-
-  private Callable (boolean optional, List<Parameter> parameters, Type returnType) {
-    this.optional = optional;
-    this.parameters = parameters;
-    this.returnType = returnType;
-  }
-
-  public static Callable parseCallable (Tokens tokens, TokenType returnTypeDelimiter, boolean canBeOptional) {
-    boolean optional = canBeOptional && tokens.skipIfNext(TokenType.T_QUESTION_AND_LEFT_PARENTHESIS);
-    if (!optional) {
-      tokens.require(TokenType.T_LEFT_PARENTHESIS);
-    }
-
-    List<Parameter> parameters = Parameter.parseParametersList(tokens);
-
-    tokens.require(TokenType.T_RIGHT_PARENTHESIS);
-
-    tokens.require(returnTypeDelimiter);
-
-    Type returnType = Type.parseType(tokens);
-
-    return new Callable(optional, parameters, returnType);
-  }
-}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/DeclarableStatement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/DeclarableStatement.java
deleted file mode 100644
index bd328afe33..0000000000
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/DeclarableStatement.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement;
-
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-
-public interface DeclarableStatement {
-  static DeclarableStatement parseDeclarableStatement(Tokens tokens) {
-    switch (tokens.peekType()) {
-    case T_KEYWORD_FUNCTION:
-      return FunctionStatement.parseFunctionStatement(tokens);
-
-    case T_KEYWORD_CONST:
-    case T_KEYWORD_VAR:
-      return VariableStatement.parseVariableStatement(tokens);
-
-    default:
-      throw tokens.constructRequiredSyntaxNotFoundException("Expected declarable statement");
-    }
-  }
-}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/InterfaceStatement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/InterfaceStatement.java
deleted file mode 100644
index 64445b7b52..0000000000
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/InterfaceStatement.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement;
-
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Interface.Interface;
-
-public class InterfaceStatement extends Statement {
-  private final Interface intface;
-
-  private InterfaceStatement (Interface intface) {
-    super(intface.getPosition());
-    this.intface = intface;
-  }
-
-  public static InterfaceStatement parseInterfaceStatement (Tokens tokens) {
-    return new InterfaceStatement(Interface.parseInterface(tokens));
-  }
-
-  public Interface getInterface () {
-    return intface;
-  }
-}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/Statement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/Statement.java
deleted file mode 100644
index 7e87ecd7b3..0000000000
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/Statement.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement;
-
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
-
-public abstract class Statement {
-  private final Position position;
-
-  protected Statement (Position position) {
-    this.position = position;
-  }
-
-  public Position getPosition () {
-    return position;
-  }
-}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/CallableSubtype.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/CallableSubtype.java
deleted file mode 100644
index d8aff33bbf..0000000000
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/CallableSubtype.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Type;
-
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Callable;
-
-public class CallableSubtype extends Subtype {
-  private final Callable callable;
-
-  public CallableSubtype (Callable callable) {
-    this.callable = callable;
-  }
-
-  public static CallableSubtype parseCallableSubtype (Tokens tokens) {
-    boolean wrapped = tokens.peekType(2) == TokenType.T_LEFT_PARENTHESIS;
-    if (wrapped) {
-      tokens.require(TokenType.T_LEFT_PARENTHESIS);
-    }
-
-    Callable callable = Callable.parseCallable(tokens, TokenType.T_EQUALS_AND_RIGHT_CHEVRON, false);
-
-    if (wrapped) {
-      tokens.require(TokenType.T_RIGHT_PARENTHESIS);
-    }
-
-    return new CallableSubtype(callable);
-  }
-}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/ReferenceSubtype.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/ReferenceSubtype.java
deleted file mode 100644
index 218b6cb5d0..0000000000
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/ReferenceSubtype.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Type;
-
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Identifier;
-
-public class ReferenceSubtype extends Subtype {
-  private final Identifier name;
-  private final Identifier lookupTerm; // Can be null
-
-  private ReferenceSubtype (Identifier name, Identifier lookupTerm) {
-    this.name = name;
-    this.lookupTerm = lookupTerm;
-  }
-
-  public static ReferenceSubtype parseReferenceSubtype (Tokens tokens) {
-    Identifier identifier = Identifier.requireIdentifier(tokens);
-    Identifier lookupTerm = null;
-
-    if (tokens.peekType() == TokenType.T_LEFT_SQUARE_BRACKET && tokens.peekType(2) == TokenType.T_IDENTIFIER) {
-      tokens.skip();
-      lookupTerm = Identifier.requireIdentifier(tokens);
-      tokens.require(TokenType.T_RIGHT_SQUARE_BRACKET);
-    }
-
-    return new ReferenceSubtype(identifier, lookupTerm);
-  }
-}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/StringLiteralSubtype.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/StringLiteralSubtype.java
deleted file mode 100644
index 36dd6b79b5..0000000000
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/StringLiteralSubtype.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Type;
-
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-
-public class StringLiteralSubtype extends Subtype {
-  private final String value;
-
-  private StringLiteralSubtype (String value) {
-    this.value = value;
-  }
-
-  public static StringLiteralSubtype parseStringSubtype (Tokens tokens) {
-    return new StringLiteralSubtype(tokens.require(TokenType.T_LITERAL_STRING).getValue());
-  }
-}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/Subtype.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/Subtype.java
deleted file mode 100644
index 94cab98b10..0000000000
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/Subtype.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Type;
-
-import org.ooml.oomlc.core.env.gen.Parse.Exception.InternalStateError;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-
-import static org.ooml.oomlc.core.env.gen.Parse.Syntax.Type.PrimitiveSubtype.Primitive.STRING_TO_PRIMITIVE_MAP;
-
-public abstract class Subtype {
-  private boolean isArray;
-
-  public static Subtype parseSubtype (Tokens tokens) {
-    Subtype subtype;
-    boolean isArray = false;
-
-    switch (tokens.peekType()) {
-    case T_IDENTIFIER:
-      String identifierName = tokens.peek().getValue();
-      if (STRING_TO_PRIMITIVE_MAP.containsKey(identifierName)) {
-        subtype = PrimitiveSubtype.parsePrimitiveSubtype(tokens);
-      } else {
-        subtype = ReferenceSubtype.parseReferenceSubtype(tokens);
-      }
-      break;
-
-    case T_LEFT_PARENTHESIS:
-      subtype = CallableSubtype.parseCallableSubtype(tokens);
-      break;
-
-    case T_LITERAL_STRING:
-      subtype = StringLiteralSubtype.parseStringSubtype(tokens);
-      break;
-
-    default:
-      throw new InternalStateError("Invalid subtype token");
-    }
-
-    if (tokens.skipIfNext(TokenType.T_LEFT_SQUARE_BRACKET)) {
-      tokens.require(TokenType.T_RIGHT_SQUARE_BRACKET);
-      isArray = true;
-    }
-
-    subtype.isArray = isArray;
-
-    return subtype;
-  }
-}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/Type.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/Type.java
deleted file mode 100644
index ba95d2ec04..0000000000
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/Type.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Type;
-
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
-
-import java.util.ArrayList;
-import java.util.List;
-
-public class Type {
-  private final List<Subtype> subtypes;
-  private final Position position;
-
-  private Type (Position position, List<Subtype> subtypes) {
-    this.position = position;
-    this.subtypes = subtypes;
-  }
-
-  public static Type parseType (Tokens tokens) {
-    Position position = tokens.peek().getPosition();
-    List<Subtype> subtypes = new ArrayList<>();
-
-    do {
-      subtypes.add(Subtype.parseSubtype(tokens));
-    } while (tokens.skipIfNext(TokenType.T_PIPE));
-
-    return new Type(position, subtypes);
-  }
-
-}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/AcceptableTokenTypes.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/AcceptableTokenTypes.java
similarity index 66%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/AcceptableTokenTypes.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/AcceptableTokenTypes.java
index eca3246085..daffd47523 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/AcceptableTokenTypes.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/AcceptableTokenTypes.java
@@ -1,6 +1,6 @@
-package org.ooml.oomlc.core.env.gen.Parse.Parsing;
+package org.ooml.oomlc.core.env.gen.Parsing;
 
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Acceptable;
+import org.ooml.oomlc.core.env.gen.Utils.Acceptable;
 
 public class AcceptableTokenTypes extends Acceptable<TokenType> {
   public AcceptableTokenTypes (TokenType... tokenTypes) {
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/Token.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/Token.java
similarity index 85%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/Token.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/Token.java
index 295fe11ec1..851b595952 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/Token.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/Token.java
@@ -1,6 +1,6 @@
-package org.ooml.oomlc.core.env.gen.Parse.Parsing;
+package org.ooml.oomlc.core.env.gen.Parsing;
 
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 public class Token {
   private final TokenType type;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/TokenType.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/TokenType.java
similarity index 86%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/TokenType.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/TokenType.java
index c532dc3423..8bc97f247d 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/TokenType.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/TokenType.java
@@ -1,7 +1,8 @@
-package org.ooml.oomlc.core.env.gen.Parse.Parsing;
+package org.ooml.oomlc.core.env.gen.Parsing;
 
 public enum TokenType {
 
+  T_AMPERSAND,
   T_COLON,
   T_COMMA,
   T_DOT,
@@ -27,7 +28,9 @@ public enum TokenType {
   T_KEYWORD_EXTENDS,
   T_KEYWORD_FUNCTION,
   T_KEYWORD_INTERFACE,
+  T_KEYWORD_IS,
   T_KEYWORD_KEYOF,
+  T_KEYWORD_NAMESPACE,
   T_KEYWORD_NEW,
   T_KEYWORD_READONLY,
   T_KEYWORD_TYPE,
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/Tokens.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/Tokens.java
similarity index 84%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/Tokens.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/Tokens.java
index fb4ca78dcd..b8ca8dcf6b 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Parsing/Tokens.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Parsing/Tokens.java
@@ -1,10 +1,11 @@
-package org.ooml.oomlc.core.env.gen.Parse.Parsing;
+package org.ooml.oomlc.core.env.gen.Parsing;
 
-import org.ooml.oomlc.core.env.gen.Parse.Exception.MalformedSyntaxException;
-import org.ooml.oomlc.core.env.gen.Parse.Exception.RequiredSyntaxNotFoundException;
-import org.ooml.oomlc.core.env.gen.Parse.Lexing.Lexer;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Matchable;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+import org.ooml.oomlc.core.env.gen.Exception.MalformedSyntaxException;
+import org.ooml.oomlc.core.env.gen.Exception.RequiredSyntaxNotFoundException;
+import org.ooml.oomlc.core.env.gen.Exception.UnexpectedEndOfCodeException;
+import org.ooml.oomlc.core.env.gen.Lexing.Lexer;
+import org.ooml.oomlc.core.env.gen.Utils.Matchable;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -27,7 +28,8 @@ public class Tokens implements Matchable<TokenType>, Iterable<Token> {
       return tokens.get(lastAcceptedPos);
     }
     Token token;
-    while ((token = lexer.lex()) == null) {}
+    while ((token = lexer.lex()) == null) {
+    }
     tokens.add(token);
     lastAcceptedPos++;
     return token;
@@ -53,7 +55,7 @@ public class Tokens implements Matchable<TokenType>, Iterable<Token> {
       return new Position(1, 1);
     } else {
       return tokens
-        .get(lastAcceptedPos)
+        .get(Math.min(lastAcceptedPos + 1, tokens.size() - 1))
         .getPosition();
     }
   }
@@ -127,7 +129,12 @@ public class Tokens implements Matchable<TokenType>, Iterable<Token> {
   }
 
   public Token acceptOptional (TokenType type) {
-    Token t = accept();
+    Token t;
+    try {
+      t = accept();
+    } catch (UnexpectedEndOfCodeException ueoce) {
+      return null;
+    }
     if (t.getType() != type) {
       backUp();
       return null;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/IdentifierSerialiser.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/IdentifierSerialiser.java
new file mode 100644
index 0000000000..1cc525fa5b
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/IdentifierSerialiser.java
@@ -0,0 +1,16 @@
+package org.ooml.oomlc.core.env.gen.Serialising;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+
+import java.lang.reflect.Type;
+
+public class IdentifierSerialiser implements JsonSerializer<Identifier> {
+  @Override
+  public JsonElement serialize (Identifier src, Type typeOfSrc, JsonSerializationContext context) {
+    return new JsonPrimitive(src.getName());
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONExc.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONExc.java
new file mode 100644
index 0000000000..de91a8c640
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONExc.java
@@ -0,0 +1,11 @@
+package org.ooml.oomlc.core.env.gen.Serialising;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+@Retention(RetentionPolicy.RUNTIME)
+@Target({ElementType.FIELD})
+public @interface JSONExc {
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONExclusionStrategy.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONExclusionStrategy.java
new file mode 100644
index 0000000000..f0beaba893
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONExclusionStrategy.java
@@ -0,0 +1,16 @@
+package org.ooml.oomlc.core.env.gen.Serialising;
+
+import com.google.gson.ExclusionStrategy;
+import com.google.gson.FieldAttributes;
+
+public class JSONExclusionStrategy implements ExclusionStrategy {
+  @Override
+  public boolean shouldSkipField (FieldAttributes f) {
+    return f.getAnnotation(JSONExc.class) != null;
+  }
+
+  @Override
+  public boolean shouldSkipClass (Class<?> clazz) {
+    return false;
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONSerialiser.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONSerialiser.java
new file mode 100644
index 0000000000..6f82fe65e2
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Serialising/JSONSerialiser.java
@@ -0,0 +1,17 @@
+package org.ooml.oomlc.core.env.gen.Serialising;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+
+public class JSONSerialiser {
+  private static final Gson gson = new GsonBuilder()
+    .registerTypeAdapter(Identifier.class, new IdentifierSerialiser())
+    .setExclusionStrategies(new JSONExclusionStrategy())
+    .setPrettyPrinting()
+    .create();
+
+  public static String serialise (Object object) {
+    return gson.toJson(object);
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Callable.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Callable.java
new file mode 100644
index 0000000000..995b5ec347
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Callable.java
@@ -0,0 +1,44 @@
+package org.ooml.oomlc.core.env.gen.Syntax;
+
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Type.Type;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Callable {
+  private final List<GenericParameter> genericParameters;
+  private final boolean isOptional;
+  private final List<Parameter> parameters;
+  private final Type returnType;
+
+  private Callable (List<GenericParameter> genericParameters, boolean isOptional, List<Parameter> parameters, Type returnType) {
+    this.genericParameters = genericParameters;
+    this.isOptional = isOptional;
+    this.parameters = parameters;
+    this.returnType = returnType;
+  }
+
+  public static Callable parseCallable (Tokens tokens, TokenType returnTypeDelimiter, boolean canBeOptional) {
+    List<GenericParameter> genericParameters = new ArrayList<>(0);
+    if (tokens.peekType() == TokenType.T_LEFT_CHEVRON) {
+      genericParameters = GenericParameter.parseGenericParameters(tokens);
+    }
+
+    boolean optional = canBeOptional && tokens.skipIfNext(TokenType.T_QUESTION_AND_LEFT_PARENTHESIS);
+    if (!optional) {
+      tokens.require(TokenType.T_LEFT_PARENTHESIS);
+    }
+
+    List<Parameter> parameters = Parameter.parseParametersList(tokens);
+
+    tokens.require(TokenType.T_RIGHT_PARENTHESIS);
+
+    tokens.require(returnTypeDelimiter);
+
+    Type returnType = Type.parseType(tokens);
+
+    return new Callable(genericParameters, optional, parameters, returnType);
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/GenericParameter.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/GenericParameter.java
new file mode 100644
index 0000000000..ca50d2435d
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/GenericParameter.java
@@ -0,0 +1,53 @@
+package org.ooml.oomlc.core.env.gen.Syntax;
+
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Type.Type;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class GenericParameter {
+  private final Identifier name;
+  private final List<Type> bounds;
+  private final Type defaultValue; // Can be null
+
+  private GenericParameter (Identifier name, List<Type> bounds, Type defaultValue) {
+    this.name = name;
+    this.bounds = bounds;
+    this.defaultValue = defaultValue;
+  }
+
+  public static List<GenericParameter> parseGenericParameters (Tokens tokens) {
+    tokens.require(TokenType.T_LEFT_CHEVRON);
+
+    List<GenericParameter> genericParameters = new ArrayList<>();
+
+    do {
+      if (tokens.peekType() == TokenType.T_RIGHT_CHEVRON) {
+        break;
+      }
+
+      Identifier name = Identifier.requireIdentifier(tokens);
+
+      List<Type> bounds = new ArrayList<>();
+
+      if (tokens.skipIfNext(TokenType.T_KEYWORD_EXTENDS)) {
+        do {
+          bounds.add(Type.parseType(tokens));
+        } while (tokens.skipIfNext(TokenType.T_AMPERSAND));
+      }
+
+      Type defaultValue = null;
+      if (tokens.skipIfNext(TokenType.T_EQUALS)) {
+        defaultValue = Type.parseType(tokens);
+      }
+
+      genericParameters.add(new GenericParameter(name, bounds, defaultValue));
+    } while (tokens.skipIfNext(TokenType.T_COMMA));
+
+    tokens.require(TokenType.T_RIGHT_CHEVRON);
+
+    return genericParameters;
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Identifier.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Identifier.java
similarity index 74%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Identifier.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Identifier.java
index 09ea041572..7418662943 100755
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Identifier.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Identifier.java
@@ -1,13 +1,14 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax;
+package org.ooml.oomlc.core.env.gen.Syntax;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Token;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+import org.ooml.oomlc.core.env.gen.Parsing.Token;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Serialising.JSONExc;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 public class Identifier {
   private final String name;
-  private final Position position;
+  @JSONExc private final Position position;
 
   public Identifier (Position position, String name) {
     this.position = position;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/Interface.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/Interface.java
similarity index 60%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/Interface.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/Interface.java
index ff97b477fe..6ee998c6b4 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/Interface.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/Interface.java
@@ -1,29 +1,25 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Interface;
+package org.ooml.oomlc.core.env.gen.Syntax.Interface;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Identifier;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Serialising.JSONExc;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType.*;
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.*;
 
 public class Interface {
-  private final Position position;
-  private final Identifier name;
-  private final List<Identifier> parents;
+  @JSONExc private final Position position;
   private final List<InterfaceCallSignature> callSignatures;
   private final List<InterfaceIndexSignature> indexSignatures;
   private final List<InterfaceConstructor> constructors;
   private final List<InterfaceProperty> properties;
   private final List<InterfaceMethod> methods;
 
-  private Interface (Position position, Identifier name, List<Identifier> parents, List<InterfaceCallSignature> callSignatures, List<InterfaceIndexSignature> indexSignatures, List<InterfaceConstructor> constructors, List<InterfaceProperty> properties, List<InterfaceMethod> methods) {
+  private Interface (Position position, List<InterfaceCallSignature> callSignatures, List<InterfaceIndexSignature> indexSignatures, List<InterfaceConstructor> constructors, List<InterfaceProperty> properties, List<InterfaceMethod> methods) {
     this.position = position;
-    this.name = name;
-    this.parents = parents;
     this.callSignatures = callSignatures;
     this.indexSignatures = indexSignatures;
     this.constructors = constructors;
@@ -32,21 +28,7 @@ public class Interface {
   }
 
   public static Interface parseInterface (Tokens tokens) {
-    Position position = tokens
-      .require(T_KEYWORD_INTERFACE)
-      .getPosition();
-
-    Identifier name = Identifier.requireIdentifier(tokens);
-
-    List<Identifier> parents = new ArrayList<>();
-
-    if (tokens.skipIfNext(T_KEYWORD_EXTENDS)) {
-      do {
-        parents.add(Identifier.requireIdentifier(tokens));
-      } while (tokens.skipIfNext(T_COMMA));
-    }
-
-    tokens.require(T_LEFT_BRACE);
+    Position position = tokens.require(T_LEFT_BRACE).getPosition();
 
     List<InterfaceCallSignature> callSignatures = new ArrayList<>();
     List<InterfaceIndexSignature> indexSignatures = new ArrayList<>();
@@ -58,13 +40,22 @@ public class Interface {
     while ((nextTokenType = tokens.peekType()) != T_RIGHT_BRACE) {
       switch (nextTokenType) {
       case T_KEYWORD_READONLY:
-        properties.add(InterfaceProperty.parseProperty(tokens));
+        if (tokens.peekType(2) == T_LEFT_SQUARE_BRACKET) {
+          indexSignatures.add(InterfaceIndexSignature.parseIndexSignature(tokens));
+        } else {
+          properties.add(InterfaceProperty.parseProperty(tokens));
+        }
+        break;
+
+      case T_LEFT_CHEVRON:
+        callSignatures.add(InterfaceCallSignature.parseCallSignature(tokens));
         break;
 
       case T_IDENTIFIER:
       case T_LITERAL_STRING:
         if (tokens.peekType(2) == T_LEFT_PARENTHESIS ||
-            tokens.peekType(2) == T_QUESTION_AND_LEFT_PARENTHESIS) {
+            tokens.peekType(2) == T_QUESTION_AND_LEFT_PARENTHESIS ||
+            tokens.peekType(2) == T_LEFT_CHEVRON) {
           methods.add(InterfaceMethod.parseMethod(tokens));
         } else {
           properties.add(InterfaceProperty.parseProperty(tokens));
@@ -92,7 +83,7 @@ public class Interface {
 
     tokens.require(T_RIGHT_BRACE);
 
-    return new Interface(position, name, parents, callSignatures, indexSignatures, constructors, properties, methods);
+    return new Interface(position, callSignatures, indexSignatures, constructors, properties, methods);
   }
 
   public Position getPosition () {
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceCallSignature.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceCallSignature.java
similarity index 52%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceCallSignature.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceCallSignature.java
index 92528d40a7..3a1e5a6fd2 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceCallSignature.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceCallSignature.java
@@ -1,13 +1,13 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Interface;
+package org.ooml.oomlc.core.env.gen.Syntax.Interface;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Callable;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Callable;
 
 public class InterfaceCallSignature {
   private final Callable callable;
 
-  public InterfaceCallSignature (Callable callable) {
+  private InterfaceCallSignature (Callable callable) {
     this.callable = callable;
   }
 
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceConstructor.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceConstructor.java
similarity index 54%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceConstructor.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceConstructor.java
index a22cc62d9e..2ac0cdc206 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceConstructor.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceConstructor.java
@@ -1,10 +1,10 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Interface;
+package org.ooml.oomlc.core.env.gen.Syntax.Interface;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Callable;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Callable;
 
-import static org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType.T_COLON;
-import static org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType.T_KEYWORD_NEW;
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.T_COLON;
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.T_KEYWORD_NEW;
 
 public class InterfaceConstructor {
   private final Callable callable;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceIndexSignature.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceIndexSignature.java
similarity index 52%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceIndexSignature.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceIndexSignature.java
index 7b55750c4f..12015212f8 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceIndexSignature.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceIndexSignature.java
@@ -1,22 +1,26 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Interface;
+package org.ooml.oomlc.core.env.gen.Syntax.Interface;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Identifier;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Type.Type;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Syntax.Type.Type;
 
 public class InterfaceIndexSignature {
+  private final boolean isReadOnly;
   private final Identifier name;
   private final Type type;
   private final Type returnType;
 
-  public InterfaceIndexSignature (Identifier name, Type type, Type returnType) {
+  private InterfaceIndexSignature (boolean isReadOnly, Identifier name, Type type, Type returnType) {
+    this.isReadOnly = isReadOnly;
     this.name = name;
     this.type = type;
     this.returnType = returnType;
   }
 
   public static InterfaceIndexSignature parseIndexSignature (Tokens tokens) {
+    boolean isReadOnly = tokens.skipIfNext(TokenType.T_KEYWORD_READONLY);
+
     tokens.require(TokenType.T_LEFT_SQUARE_BRACKET);
 
     Identifier name = Identifier.requireIdentifier(tokens);
@@ -31,6 +35,6 @@ public class InterfaceIndexSignature {
 
     Type returnType = Type.parseType(tokens);
 
-    return new InterfaceIndexSignature(name, type, returnType);
+    return new InterfaceIndexSignature(isReadOnly, name, type, returnType);
   }
 }
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceMethod.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceMethod.java
similarity index 60%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceMethod.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceMethod.java
index ee64449c89..0bb3351958 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceMethod.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceMethod.java
@@ -1,10 +1,10 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Interface;
+package org.ooml.oomlc.core.env.gen.Syntax.Interface;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Callable;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Callable;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
 
-import static org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType.T_COLON;
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.T_COLON;
 
 public class InterfaceMethod {
   private final Identifier name;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceProperty.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceProperty.java
similarity index 77%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceProperty.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceProperty.java
index 7934033ec7..b0949454ac 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Interface/InterfaceProperty.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Interface/InterfaceProperty.java
@@ -1,10 +1,10 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Interface;
+package org.ooml.oomlc.core.env.gen.Syntax.Interface;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Token;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Identifier;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Type.Type;
+import org.ooml.oomlc.core.env.gen.Parsing.Token;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Syntax.Type.Type;
 
 public class InterfaceProperty {
   private final Identifier name;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Parameter.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Parameter.java
similarity index 86%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Parameter.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Parameter.java
index 2cc7342d60..9c908b28c4 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Parameter.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Parameter.java
@@ -1,12 +1,12 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax;
+package org.ooml.oomlc.core.env.gen.Syntax;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Type.Type;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Type.Type;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType.*;
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.*;
 
 public class Parameter {
   private final Identifier name;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/DeclarableStatement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/DeclarableStatement.java
new file mode 100644
index 0000000000..a9cdc8430c
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/DeclarableStatement.java
@@ -0,0 +1,15 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Statement;
+
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+
+public interface DeclarableStatement {
+  static DeclarableStatement parseDeclarableStatement (Tokens tokens) {
+    Statement statement = Statement.parseStatement(tokens);
+
+    if (!(statement instanceof DeclarableStatement)) {
+      throw tokens.constructRequiredSyntaxNotFoundException("Statement is not declarable");
+    }
+
+    return (DeclarableStatement) statement;
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/DeclarationStatement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/DeclarationStatement.java
similarity index 71%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/DeclarationStatement.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/DeclarationStatement.java
index e86ccca598..87a3dafe96 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/DeclarationStatement.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/DeclarationStatement.java
@@ -1,8 +1,8 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement;
+package org.ooml.oomlc.core.env.gen.Syntax.Statement;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 public class DeclarationStatement extends Statement {
   private final DeclarableStatement declarable;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/FunctionStatement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/FunctionStatement.java
similarity index 66%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/FunctionStatement.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/FunctionStatement.java
index 1b85c18cbe..356c2f61a8 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/FunctionStatement.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/FunctionStatement.java
@@ -1,10 +1,10 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement;
+package org.ooml.oomlc.core.env.gen.Syntax.Statement;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Callable;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Identifier;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Callable;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 public class FunctionStatement extends Statement implements DeclarableStatement {
   private final Identifier name;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/InterfaceStatement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/InterfaceStatement.java
new file mode 100644
index 0000000000..96c6097ca6
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/InterfaceStatement.java
@@ -0,0 +1,54 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Statement;
+
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.GenericParameter;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Syntax.Interface.Interface;
+import org.ooml.oomlc.core.env.gen.Syntax.Type.ReferenceType;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.T_COMMA;
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.T_KEYWORD_EXTENDS;
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.T_KEYWORD_INTERFACE;
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.T_LEFT_CHEVRON;
+
+public class InterfaceStatement extends Statement {
+  private final Identifier name;
+  private final List<GenericParameter> genericParameters;
+  private final List<ReferenceType> parents;
+  private final Interface intface;
+
+  private InterfaceStatement (Position position, Identifier name, List<GenericParameter> genericParameters, List<ReferenceType> parents, Interface intface) {
+    super(position);
+    this.name = name;
+    this.genericParameters = genericParameters;
+    this.parents = parents;
+    this.intface = intface;
+  }
+
+  public static InterfaceStatement parseInterfaceStatement (Tokens tokens) {
+    Position position = tokens.require(T_KEYWORD_INTERFACE).getPosition();
+
+    Identifier name = Identifier.requireIdentifier(tokens);
+
+    List<GenericParameter> genericParameters = new ArrayList<>(0);
+    if (tokens.peekType() == T_LEFT_CHEVRON) {
+      genericParameters = GenericParameter.parseGenericParameters(tokens);
+    }
+
+    List<ReferenceType> parents = new ArrayList<>();
+
+    if (tokens.skipIfNext(T_KEYWORD_EXTENDS)) {
+      do {
+        parents.add(ReferenceType.parseReferenceType(tokens));
+      } while (tokens.skipIfNext(T_COMMA));
+    }
+
+    Interface intface = Interface.parseInterface(tokens);
+
+    return new InterfaceStatement(position, name, genericParameters, parents, intface);
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/NamespaceStatement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/NamespaceStatement.java
new file mode 100644
index 0000000000..08670999e8
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/NamespaceStatement.java
@@ -0,0 +1,35 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Statement;
+
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+import java.util.List;
+
+import static org.ooml.oomlc.core.env.gen.Parsing.TokenType.T_KEYWORD_NAMESPACE;
+
+public class NamespaceStatement extends Statement implements DeclarableStatement {
+  private final Identifier name;
+  private final List<Statement> statements;
+
+  private NamespaceStatement (Position position, Identifier name, List<Statement> statements) {
+    super(position);
+    this.name = name;
+    this.statements = statements;
+  }
+
+  public static NamespaceStatement parseNamespaceStatement (Tokens tokens) {
+    Position position = tokens.require(T_KEYWORD_NAMESPACE).getPosition();
+
+    Identifier name = Identifier.requireIdentifier(tokens);
+
+    tokens.require(TokenType.T_LEFT_BRACE);
+
+    List<Statement> statements = Statement.parseStatements(tokens, TokenType.T_RIGHT_BRACE);
+
+    tokens.require(TokenType.T_RIGHT_BRACE);
+
+    return new NamespaceStatement(position, name, statements);
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/Statement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/Statement.java
new file mode 100644
index 0000000000..4a98e4145a
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/Statement.java
@@ -0,0 +1,76 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Statement;
+
+import org.ooml.oomlc.core.env.gen.Exception.UnexpectedEndOfCodeException;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Serialising.JSONExc;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.function.Function;
+
+public abstract class Statement {
+  private static final Map<TokenType, Function<Tokens, Statement>> PARSERS = _createParsersMap();
+
+  @JSONExc private final Position position;
+
+  protected Statement (Position position) {
+    this.position = position;
+  }
+
+  private static Map<TokenType, Function<Tokens, Statement>> _createParsersMap () {
+    Map<TokenType, Function<Tokens, Statement>> map = new HashMap<>();
+
+    map.put(TokenType.T_KEYWORD_CONST, VariableStatement::parseVariableStatement);
+    map.put(TokenType.T_KEYWORD_VAR, VariableStatement::parseVariableStatement);
+    map.put(TokenType.T_KEYWORD_TYPE, TypeAliasStatement::parseTypeAliasStatement);
+    map.put(TokenType.T_KEYWORD_FUNCTION, FunctionStatement::parseFunctionStatement);
+    map.put(TokenType.T_KEYWORD_DECLARE, DeclarationStatement::parseDeclarationStatement);
+    map.put(TokenType.T_KEYWORD_NAMESPACE, NamespaceStatement::parseNamespaceStatement);
+    map.put(TokenType.T_KEYWORD_INTERFACE, InterfaceStatement::parseInterfaceStatement);
+
+    return map;
+  }
+
+  public static Statement parseStatement (Tokens tokens) {
+    TokenType nextTokenType = tokens.peekType();
+
+    Statement statement;
+
+    if (!Statement.PARSERS.containsKey(nextTokenType)) {
+      throw tokens.constructMalformedSyntaxException("Unknown statement");
+    }
+
+    statement = Statement.PARSERS.get(nextTokenType).apply(tokens);
+
+    return statement;
+  }
+
+  public static List<Statement> parseStatements (Tokens tokens, TokenType breakOn) {
+    List<Statement> statements = new ArrayList<>();
+
+    while (true) {
+      try {
+        if (tokens.peekType() == breakOn) {
+          break;
+        }
+      } catch (UnexpectedEndOfCodeException ueoce) {
+        if (breakOn == null) {
+          break;
+        }
+        throw ueoce;
+      }
+
+      Statement statement = parseStatement(tokens);
+
+      tokens.skipIfNext(TokenType.T_SEMICOLON);
+
+      statements.add(statement);
+    }
+
+    return statements;
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/TypeAliasStatement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/TypeAliasStatement.java
new file mode 100644
index 0000000000..0976e349fa
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/TypeAliasStatement.java
@@ -0,0 +1,30 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Statement;
+
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Syntax.Type.Type;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+public class TypeAliasStatement extends Statement implements DeclarableStatement {
+  private final Identifier name;
+  private final Type type;
+
+  private TypeAliasStatement (Position position, Identifier name, Type type) {
+    super(position);
+    this.name = name;
+    this.type = type;
+  }
+
+  public static TypeAliasStatement parseTypeAliasStatement (Tokens tokens) {
+    Position position = tokens.require(TokenType.T_KEYWORD_TYPE).getPosition();
+
+    Identifier name = Identifier.requireIdentifier(tokens);
+
+    tokens.require(TokenType.T_EQUALS);
+
+    Type type = Type.parseType(tokens);
+
+    return new TypeAliasStatement(position, name, type);
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/VariableStatement.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/VariableStatement.java
similarity index 71%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/VariableStatement.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/VariableStatement.java
index 5c5153e794..839a890e56 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Statement/VariableStatement.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Statement/VariableStatement.java
@@ -1,11 +1,11 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Statement;
-
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Token;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.TokenType;
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Identifier;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Type.Type;
-import org.ooml.oomlc.core.env.gen.Parse.Utils.Position;
+package org.ooml.oomlc.core.env.gen.Syntax.Statement;
+
+import org.ooml.oomlc.core.env.gen.Parsing.Token;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Syntax.Type.Type;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 public class VariableStatement extends Statement implements DeclarableStatement {
   private final Identifier name;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/ArrayType.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/ArrayType.java
new file mode 100644
index 0000000000..89c6122439
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/ArrayType.java
@@ -0,0 +1,12 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
+
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+public class ArrayType extends Type {
+  private final Type elementType;
+
+  public ArrayType (Position position, Type elementType) {
+    super(position);
+    this.elementType = elementType;
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/CallableType.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/CallableType.java
new file mode 100644
index 0000000000..35bfecc6c6
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/CallableType.java
@@ -0,0 +1,22 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
+
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Callable;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+public class CallableType extends Type {
+  private final Callable callable;
+
+  private CallableType (Position position, Callable callable) {
+    super(position);
+    this.callable = callable;
+  }
+
+  public static CallableType parseCallableType (Tokens tokens) {
+    Position position = tokens.peek().getPosition();
+    Callable callable = Callable.parseCallable(tokens, TokenType.T_EQUALS_AND_RIGHT_CHEVRON, false);
+
+    return new CallableType(position, callable);
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/IndexQueryType.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/IndexQueryType.java
new file mode 100644
index 0000000000..f92eb68781
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/IndexQueryType.java
@@ -0,0 +1,12 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
+
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+public class IndexQueryType extends Type {
+  private final Type enumerable;
+
+  public IndexQueryType (Position position, Type enumerable) {
+    super(position);
+    this.enumerable = enumerable;
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/InlineInterfaceType.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/InlineInterfaceType.java
new file mode 100644
index 0000000000..c3f5888772
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/InlineInterfaceType.java
@@ -0,0 +1,17 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
+
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Interface.Interface;
+
+public class InlineInterfaceType extends Type {
+  private final Interface intface;
+
+  private InlineInterfaceType (Interface intface) {
+    super(intface.getPosition());
+    this.intface = intface;
+  }
+
+  public static InlineInterfaceType parseInlineInterfaceType (Tokens tokens) {
+    return new InlineInterfaceType(Interface.parseInterface(tokens));
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/KeyofType.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/KeyofType.java
new file mode 100644
index 0000000000..eb008fd1b0
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/KeyofType.java
@@ -0,0 +1,20 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
+
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+public class KeyofType extends Type {
+  private final ReferenceType enumerable;
+
+  private KeyofType (Position position, ReferenceType enumerable) {
+    super(position);
+    this.enumerable = enumerable;
+  }
+
+  public static KeyofType parseKeyofType (Tokens tokens) {
+    Position position = tokens.require(TokenType.T_KEYWORD_KEYOF).getPosition();
+
+    return new KeyofType(position, ReferenceType.parseReferenceType(tokens));
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/PredicateType.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/PredicateType.java
new file mode 100644
index 0000000000..09f5be326c
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/PredicateType.java
@@ -0,0 +1,28 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
+
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+public class PredicateType extends Type {
+  private final Identifier argumentName;
+  private final Type type;
+
+  private PredicateType (Position position, Identifier argumentName, Type type) {
+    super(position);
+    this.argumentName = argumentName;
+    this.type = type;
+  }
+
+  public static PredicateType parsePredicateType (Tokens tokens) {
+    Identifier argumentName = Identifier.requireIdentifier(tokens);
+    Position position = argumentName.getPosition();
+
+    tokens.require(TokenType.T_KEYWORD_IS);
+
+    Type type = Type.parseType(tokens);
+
+    return new PredicateType(position, argumentName, type);
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/PrimitiveSubtype.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/PrimitiveType.java
similarity index 55%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/PrimitiveSubtype.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/PrimitiveType.java
index f9b4f714ef..f4cac5f68d 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Syntax/Type/PrimitiveSubtype.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/PrimitiveType.java
@@ -1,27 +1,30 @@
-package org.ooml.oomlc.core.env.gen.Parse.Syntax.Type;
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
 
-import org.ooml.oomlc.core.env.gen.Parse.Parsing.Tokens;
-import org.ooml.oomlc.core.env.gen.Parse.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
 
 import java.util.HashMap;
 import java.util.Map;
 
-import static org.ooml.oomlc.core.env.gen.Parse.Syntax.Type.Type.PrimitiveSubtype.Primitive.STRING_TO_PRIMITIVE_MAP;
+import static org.ooml.oomlc.core.env.gen.Syntax.Type.PrimitiveType.Primitive.STRING_TO_PRIMITIVE_MAP;
 
-public class PrimitiveSubtype extends Subtype {
-  private final Primitive type;
+public class PrimitiveType extends Type {
+  private final Primitive primitive;
 
-  private PrimitiveSubtype (Primitive type) {
-    this.type = type;
+  private PrimitiveType (Position position, Primitive primitive) {
+    super(position);
+    this.primitive = primitive;
   }
 
-  public static PrimitiveSubtype parsePrimitiveSubtype (Tokens tokens) {
+  public static PrimitiveType parsePrimitiveType (Tokens tokens) {
     Identifier identifier = Identifier.requireIdentifier(tokens);
+    Position position = identifier.getPosition();
     String name = identifier.getName();
     if (!STRING_TO_PRIMITIVE_MAP.containsKey(name)) {
       throw tokens.constructRequiredSyntaxNotFoundException("Required a primitive subtype");
     }
-    return new PrimitiveSubtype(STRING_TO_PRIMITIVE_MAP.get(name));
+    return new PrimitiveType(position, STRING_TO_PRIMITIVE_MAP.get(name));
   }
 
   public enum Primitive {
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/ReferenceType.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/ReferenceType.java
new file mode 100644
index 0000000000..74a4772cea
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/ReferenceType.java
@@ -0,0 +1,46 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
+
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Syntax.Identifier;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class ReferenceType extends Type {
+  private final List<Identifier> reference;
+  private final List<Type> genericArguments;
+
+  private ReferenceType (Position position, List<Identifier> reference, List<Type> genericArguments) {
+    super(position);
+    this.reference = reference;
+    this.genericArguments = genericArguments;
+  }
+
+  public static ReferenceType parseReferenceType (Tokens tokens) {
+    List<Identifier> reference = new ArrayList<>();
+    do {
+      Identifier name = Identifier.requireIdentifier(tokens);
+      reference.add(name);
+    } while (tokens.skipIfNext(TokenType.T_DOT));
+
+    Position position = reference.get(0).getPosition();
+
+    List<Type> genericArguments = new ArrayList<>();
+
+    if (tokens.skipIfNext(TokenType.T_LEFT_CHEVRON)) {
+      do {
+        if (tokens.peekType() == TokenType.T_RIGHT_CHEVRON) {
+          break;
+        }
+
+        genericArguments.add(Type.parseType(tokens));
+      } while (tokens.skipIfNext(TokenType.T_COMMA));
+
+      tokens.require(TokenType.T_RIGHT_CHEVRON);
+    }
+
+    return new ReferenceType(position, reference, genericArguments);
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/StringLiteralType.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/StringLiteralType.java
new file mode 100644
index 0000000000..06d953c610
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/StringLiteralType.java
@@ -0,0 +1,20 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
+
+import org.ooml.oomlc.core.env.gen.Parsing.Token;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+public class StringLiteralType extends Type {
+  private final String value;
+
+  private StringLiteralType (Position position, String value) {
+    super(position);
+    this.value = value;
+  }
+
+  public static StringLiteralType parseStringLiteraltype (Tokens tokens) {
+    Token t = tokens.require(TokenType.T_LITERAL_STRING);
+    return new StringLiteralType(t.getPosition(), t.getValue());
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/Type.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/Type.java
new file mode 100644
index 0000000000..44fe4d4931
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/Type.java
@@ -0,0 +1,104 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
+
+import org.ooml.oomlc.core.env.gen.Parsing.Token;
+import org.ooml.oomlc.core.env.gen.Parsing.TokenType;
+import org.ooml.oomlc.core.env.gen.Parsing.Tokens;
+import org.ooml.oomlc.core.env.gen.Serialising.JSONExc;
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.ooml.oomlc.core.env.gen.Syntax.Type.PrimitiveType.Primitive.STRING_TO_PRIMITIVE_MAP;
+
+public abstract class Type {
+  @JSONExc private final Position position;
+
+  protected Type (Position position) {
+    this.position = position;
+  }
+
+  public static Type parseType (Tokens tokens) {
+    Position position = tokens.peek().getPosition();
+
+    List<Type> subtypes = new ArrayList<>();
+
+    do {
+      Type subtype;
+
+      switch (tokens.peekType()) {
+      case T_IDENTIFIER:
+        String identifierName = tokens.peek().getValue();
+
+        if (STRING_TO_PRIMITIVE_MAP.containsKey(identifierName)) {
+          // Primitive type
+          subtype = PrimitiveType.parsePrimitiveType(tokens);
+
+        } else if (tokens.peekType(2) == TokenType.T_KEYWORD_IS) {
+          // Predicate type
+          subtype = PredicateType.parsePredicateType(tokens);
+
+        } else {
+          // Reference type
+          subtype = ReferenceType.parseReferenceType(tokens);
+        }
+        break;
+
+      case T_LEFT_PARENTHESIS:
+        if (tokens.peekType(2) == TokenType.T_RIGHT_PARENTHESIS ||
+            tokens.peekType(3) == TokenType.T_COLON) {
+          // Callable type
+          subtype = CallableType.parseCallableType(tokens);
+        } else {
+          // Grouping
+          tokens.skip();
+          subtype = Type.parseType(tokens);
+          tokens.require(TokenType.T_RIGHT_PARENTHESIS);
+        }
+        break;
+
+      case T_LEFT_CHEVRON:
+        // Callable type
+        subtype = CallableType.parseCallableType(tokens);
+        break;
+
+      case T_LEFT_BRACE:
+        // Inline interface type
+        subtype = InlineInterfaceType.parseInlineInterfaceType(tokens);
+        break;
+
+      case T_LITERAL_STRING:
+        subtype = StringLiteralType.parseStringLiteraltype(tokens);
+        break;
+
+      case T_KEYWORD_KEYOF:
+        subtype = KeyofType.parseKeyofType(tokens);
+        break;
+
+      default:
+        throw tokens.constructRequiredSyntaxNotFoundException("Expected type");
+      }
+
+      while (tokens.peek().getType() == TokenType.T_LEFT_SQUARE_BRACKET) {
+        Token postToken = tokens.accept();
+        Position postPosition = postToken.getPosition();
+        if (tokens.peekType() == TokenType.T_RIGHT_SQUARE_BRACKET) {
+          // Array type
+          subtype = new ArrayType(postPosition, subtype);
+        } else {
+          // Index query type
+          subtype = new IndexQueryType(postPosition, Type.parseType(tokens));
+        }
+        tokens.require(TokenType.T_RIGHT_SQUARE_BRACKET);
+      }
+
+      subtypes.add(subtype);
+    } while (tokens.skipIfNext(TokenType.T_PIPE));
+
+    if (subtypes.size() == 1) {
+      return subtypes.get(0);
+    }
+
+    return new UnionType(position, subtypes);
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/UnionType.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/UnionType.java
new file mode 100644
index 0000000000..37a3e9b91f
--- /dev/null
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Syntax/Type/UnionType.java
@@ -0,0 +1,14 @@
+package org.ooml.oomlc.core.env.gen.Syntax.Type;
+
+import org.ooml.oomlc.core.env.gen.Utils.Position;
+
+import java.util.List;
+
+public class UnionType extends Type {
+  private final List<Type> subtypes;
+
+  public UnionType (Position position, List<Type> subtypes) {
+    super(position);
+    this.subtypes = subtypes;
+  }
+}
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/Acceptable.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Utils/Acceptable.java
similarity index 85%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/Acceptable.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Utils/Acceptable.java
index 05020228ae..9ae1c0c7fd 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/Acceptable.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Utils/Acceptable.java
@@ -1,4 +1,4 @@
-package org.ooml.oomlc.core.env.gen.Parse.Utils;
+package org.ooml.oomlc.core.env.gen.Utils;
 
 import java.util.Arrays;
 import java.util.HashSet;
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/Matchable.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Utils/Matchable.java
similarity index 63%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/Matchable.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Utils/Matchable.java
index f4c8aca887..dea631694e 100755
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/Matchable.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Utils/Matchable.java
@@ -1,4 +1,4 @@
-package org.ooml.oomlc.core.env.gen.Parse.Utils;
+package org.ooml.oomlc.core.env.gen.Utils;
 
 public interface Matchable<M> {
   M matcherConsume ();
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/MatcherTreeNode.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Utils/MatcherTreeNode.java
similarity index 76%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/MatcherTreeNode.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Utils/MatcherTreeNode.java
index d18669bd1e..444d79da08 100755
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/MatcherTreeNode.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Utils/MatcherTreeNode.java
@@ -1,19 +1,19 @@
-package org.ooml.oomlc.core.env.gen.Parse.Utils;
+package org.ooml.oomlc.core.env.gen.Utils;
 
-import org.ooml.oomlc.core.env.gen.Parse.Exception.InternalStateError;
+import org.ooml.oomlc.core.env.gen.Exception.InternalStateError;
 
 import java.util.Map;
 import java.util.TreeMap;
 
 public class MatcherTreeNode<M, R> {
-  protected final Map<M, MatcherTreeNode<M, R>> children = new TreeMap<>();
-  protected R tail = null;
+  private final Map<M, MatcherTreeNode<M, R>> children = new TreeMap<>();
+  private R tail = null;
 
-  public boolean hasTail () {
+  private boolean hasTail () {
     return tail != null;
   }
 
-  public void addSequence (M[] sequence, int start, R result) {
+  protected void addSequence (M[] sequence, int start, R result) {
     M m = sequence[start];
     MatcherTreeNode<M, R> child = children.get(m);
 
diff --git a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/Position.java b/gen/main/java/org/ooml/oomlc/core/env/gen/Utils/Position.java
similarity index 84%
rename from gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/Position.java
rename to gen/main/java/org/ooml/oomlc/core/env/gen/Utils/Position.java
index fc8092921a..849feaca66 100644
--- a/gen/main/java/org/ooml/oomlc/core/env/gen/Parse/Utils/Position.java
+++ b/gen/main/java/org/ooml/oomlc/core/env/gen/Utils/Position.java
@@ -1,4 +1,4 @@
-package org.ooml.oomlc.core.env.gen.Parse.Utils;
+package org.ooml.oomlc.core.env.gen.Utils;
 
 public class Position {
   private final int line;
diff --git a/pom.xml b/pom.xml
index 5554403509..373350e7e5 100644
--- a/pom.xml
+++ b/pom.xml
@@ -11,6 +11,7 @@
   <properties>
     <maven.compiler.source>1.8</maven.compiler.source>
     <maven.compiler.target>1.8</maven.compiler.target>
+    <src.dir>gen/main/java</src.dir>
   </properties>
 
   <dependencies>
@@ -22,6 +23,7 @@
   </dependencies>
 
   <build>
+    <sourceDirectory>${src.dir}</sourceDirectory>
     <plugins>
       <plugin>
         <artifactId>maven-assembly-plugin</artifactId>
-- 
2.19.1

